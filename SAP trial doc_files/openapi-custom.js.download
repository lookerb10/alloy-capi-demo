document.addEventListener("DOMContentLoaded", function () {
  const applyChanges = () => {
    const ulElements = document.querySelectorAll(".openapi-tabs__schema");
    ulElements.forEach((ulElement) => {
      // Select all li elements within the ul
      const liElements = ulElement.querySelectorAll(
        ".openapi-tabs__schema-item"
      );

      if (liElements.length > 0) {
        const firstChild = liElements[0];
        const lastChild = liElements[liElements.length - 1];

        // Only apply changes if necessary
        if (!lastChild.classList.contains("active")) {
          // Remove the 'active' class from the first child
          firstChild.classList.remove("active");

          // Set aria-selected to false for all li elements
          liElements.forEach((li) => li.setAttribute("aria-selected", "false"));

          // Add the 'active' class and set aria-selected to true for the last child
          lastChild.classList.add("active");
          lastChild.setAttribute("aria-selected", "true");

          // Simulate a click on the last child
          lastChild.click();
        }
      }
    });
  };

  // Debounce function to limit the frequency of applyChanges calls
  let timeoutId;
  const debounceApplyChanges = () => {
    if (timeoutId) clearTimeout(timeoutId);
    timeoutId = setTimeout(applyChanges, 50); // Adjust the debounce delay as needed
  };

  // Run the function initially
  applyChanges();

  // Create a MutationObserver to monitor changes to the DOM
  const observer = new MutationObserver(debounceApplyChanges);

  // Configure the observer to look for changes in the body subtree
  observer.observe(document.body, {
    childList: true,
    subtree: true,
  });
});
